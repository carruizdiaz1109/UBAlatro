@startuml
'https://plantuml.com/sequence-diagram

title Se verifica que se aplica comodin puntaje correctamente

actor ":TestCase" as user
participant ":Mazo" as mazo
participant ":Ronda" as ronda
participant ":CartaPoker" as carta
participant "cartas :ArrayList" as lista
participant ":Mano" as mano
participant ":Jugador" as jugador
participant "unComodin :EfectoPuntaje" as comodin
participant "unaJugada: Poker" as jugada

user -> mazo**: MazoMock()
user -> ronda**: Ronda(numero: 1, puntajeMinimo: 10000, descartesDisponibles: 3, jugadasDisponibles: 3)
user -> lista**: ArrayList()

loop por 5 cartas
user -> carta**: CartaPoker(Valor, Palo)
user -> lista: add(carta)
end

user -> mano**: Mano(cartas)

user -> jugador**: Jugador(Pepe, mazoMock)
user -> jugador: iniciarRonda(ronda)
user -> user: puntajeEsperado = (2*4+60)*7*8

user -> comodin**: EfectoPuntaje(valor: 0, multiplicador: 8)
user -> jugador: anadirComodin(unComodin)

loop por 5 cartas
user -> jugador: seleccionarCarta(carta)
jugador -> mano: seleccionarCarta(carta)
end

user -> jugador: jugar()
jugador -> mano: jugar()
mano -> jugada**: Poker(cartasSeleccionadas)
jugada -> ":puntaje" as puntaje**
mano --> jugador: Poker
jugador -> jugador: aplicarComodin(poker)

loop for each comodin in comodines
    jugador -> comodin: aplicar(unDescarte)
    comodin -> jugada: aplicarComodin(puntaje)
    jugada -> puntaje: sumarPuntaje(puntaje)
    puntaje --> jugada: unPuntaje
end

user -> ronda: calcularTotalRonda()
loop for each jugada in jugadas
    ronda -> jugada: calcularPuntaje()
        jugada -> puntaje: calcularPuntaje()
        puntaje --> jugada: unPuntaje
    jugada --> ronda: unPuntaje
end
ronda --> user: puntajeObtenido

user -> user: assertEquals(puntajeEsperado, puntajeObtenido);

@enduml