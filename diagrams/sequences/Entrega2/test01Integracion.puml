@startuml
' https://plantuml.com/sequence-diagram

actor ":TestCase" as user
participant ":Ronda" as ronda
participant "c :cartaPoker" as carta
participant ":Mano" as mano
participant ":Jugador" as jugador
participant "unComodin:EfectoJugada" as comodin
participant ":Escalera" as escalera
participant ":Puntaje" as puntaje

' Inicialización
user -> ronda: Ronda(1,10000,3,3)
loop i=2, i<7, i++
    user -> carta: CartaFactory.crearCarta(i, Palo)
end
user -> mano: new Mano(cartas)
user -> jugador: Jugador("Pepe", mazoMock)
user -> jugador: iniciarRonda(ronda)

' Agregar comodín
user -> comodin: EfectoJugada(Escalera.class, 0, 3)
user -> jugador: aniadirComodin(unComodin)

' Selección de cartas
loop for each carta in Mano
    user -> jugador: seleccionarCarta(carta)
    jugador -> mano: seleccionarCarta(carta)
end

' Calcular puntaje esperado
user -> user: puntajeEsperado1: (2+3+4+5+6+30)*12

' Realizar jugada
user -> jugador: jugar()
jugador -> mano: jugar()
mano -> escalera: new Escalera(cartasSeleccionadas)
escalera -> puntaje: (30,3)
mano --> jugador: Escalera
jugador -> jugador: aplicarComodin(unaJugada)

' Aplicar comodín
loop for each comodin
    jugador -> comodin: aplicar(escalera)
    comodin -> escalera: aplicarComodin(puntaje)
    escalera -> puntaje: sumarPuntaje(puntaje)
    puntaje --> escalera: unPuntaje
end

' Agregar jugada a la ronda
jugador -> ronda: AgregarJugada(Escalera)

' Calcular total de la ronda
user -> ronda: calcularTotalRonda()
loop for each jugada in jugadas
    ronda -> escalera: calcularPuntaje()
    comodin -> escalera: aplicarComodin(puntaje)
    escalera -> puntaje: sumarPuntaje(puntaje)
    puntaje --> escalera: unPuntaje
end

' Resultado final
ronda -> user: 600
user -> user: assertEquals(puntajeEsperado1, puntajeObtenido)

@enduml