@startuml
package Model {

    class Puntaje {
        - puntos: int
        - multiplicador: int

        + Puntaje(puntos:int, multiplicador:int)
        + incrementarPuntos(incremento: int)
        + incrementarMultiplicador(incremento: int)
        + calcularPuntaje(): int
        + sumarPuntaje(unPuntaje: Puntaje):Puntaje
        + compararPuntajecon(otroPuntaje: int): boolean
        + compararPuntajecon(otroPuntaje: Puntaje): boolean
        + mostrarPuntos(): string
        + mostrarMultiplicador(): string
    }

    abstract class CartaPoker {
        - puntajeComodin: Puntaje

        + CartaPoker(valor: Valor, palo: Palo)
        + comprar(): CartaPoker
        + modificarPuntaje(Puntaje: unPuntaje
        + esMismoValor(otraCarta: CartaPoker): boolean
        + esMismoPalo(otraCarta: CartaPoker): boolean
        + esConsecutiva(otraCarta: CartaPoker): boolean
        + compararCartaCon(otraCarta: CartaPoker): boolean
        + aplicarTarot(unPuntaje: Puntaje)
        + aplicarComodin(unPuntaje: Puntaje)
        + comprar(): Comprable
        + {abstract}obtenerValoresPosibles(): List<Integer>
        + {abstract}obtenerPuntaje(): Puntaje
    }

    abstract class Jugada {
        - sumaValores: Puntaje
        - puntajeComodin: Puntaje
        # cartasValidas: List<CartaPoker>
        # siguiente: Jugada

        + Jugada(cartas: Lista<CartaPoker>, puntaje: Puntaje)
        - configurarCadena(cartas: List<CartaPoker>): Juagada
        + crearJugada(cartas: List<CartaPoker>): Jugada
        + evaluar(cartas: List<CartaPoker>): Jugada
        + sumarValores()
        + calcularPuntaje(): int
        + aplicarComodin(unPuntaje: Puntaje)
        + aplicarTarot(unPuntaje: Puntaje)
        # {abstract}seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class CartaFactory {
        + crearCarta(valor: Valor, palo: Palo): CartaPoker
    }

    class Numero {
       + obtenerPuntaje(): Puntaje
       + obtenerValoresPosibles(): List<Integer>
    }

    class Figura {
       + obtenerPuntaje(): Puntaje
       + obtenerValoresPosibles(): List<Integer>
    }

    class As {
       + obtenerPuntaje(): Puntaje
       + obtenerValoresPosibles(): List<Integer>
    }

    enum Palo{
        CORAZONES
        PICAS
        DIAMANTES
        TREBOLES

        + obtenerPaloDesdeString(paloStr: string): Palo
    }

    enum Valor {
       AS
       DOS
       TRES
       CUATRO
       CINCO
       SEIS
       SIETE
       OCHO
       NUEVE
       DIEZ
       JOTA
       REINA
       REY

        + obtenerValorDesdeString(numeroStr: string): Valor
    }


    Jugada *-up- "1..5"CartaPoker
    Jugada o-right- Puntaje
    CartaPoker o-- Puntaje

    CartaFactory -down-> CartaPoker
    Numero -up-|> CartaPoker
    Figura -up-|> CartaPoker
    As -up-|> CartaPoker

    CartaPoker -left-> Palo
    CartaPoker -right-> Valor
}
@enduml