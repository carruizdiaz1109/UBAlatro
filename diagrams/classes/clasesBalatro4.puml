@startuml
package Model {

    class Puntaje {
        - puntos: int
        - multiplicador: int

        + Puntaje(puntos:int, multiplicador:int)
        + incrementarPuntos(incremento: int)
        + incrementarMultiplicador(incremento: int)
        + calcularPuntaje(): int
        + sumarPuntaje(unPuntaje: Puntaje):Puntaje
        + compararPuntajecon(otroPuntaje: int): boolean
        + compararPuntajecon(otroPuntaje: Puntaje): boolean
    }

    class CartaPoker {
        - valor: Valor
        - palo: Palo
        - puntajeComodin: Puntaje
        - puntajeTarot: Puntaje

        + CartaPoker(valor: Valor, palo: Palo)
        + comprar(): CartaPoker
        + modificarPuntaje(Puntaje: unPuntaje)
        + calcularPuntaje(): int
        + sumarValorCon(otroValor: int): int
        + esMismoValor(otraCarta: CartaPoker): boolean
        + esMismoPalo(otraCarta: CartaPoker): boolean
        + esConsecutiva(otraCarta: CartaPoker): boolean
        + compararCartaCon(otraCarta: CartaPoker): boolean
        + activarTarot(tarot: Tarot)
        + obtenerEscalera(): ConjuntoCartas
        + aplicarComodin(unPuntaje: Puntaje)
    }

    abstract class Jugada {
        - sumaValores: Puntaje
        - puntajeComodin: Puntaje
        - cartasValidas: List<CartaPoker>

        + Jugada(cartas: Lista<CartaPoker>, puntaje: Puntaje)
        + crearJugada(cartas: List<CartaPoker>): Jugada
        + aplicarComodin(puntaje: Puntaje)
        + sumarValores()
        + calcularPuntaje(): int
        + {abstract}esJugada(cartas: List<CartaPoker>): boolean
        # {abstract}seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class CartaAlta {
        + esJugada(cartas: List<CartaPoker>): boolean
        # seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class Par {
        + esJugada(cartas: List<CartaPoker>): boolean
        # seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class DoblePar {
        + esJugada(cartas: List<CartaPoker>): boolean
        # seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class Trio {
        + esJugada(cartas: List<CartaPoker>): boolean
        # seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class Escalera {
        + esJugada(cartas: List<CartaPoker>): boolean
        # seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class Color {
        + esJugada(cartas: List<CartaPoker>): boolean
        # seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class FullHouse {
        + esJugada(cartas: List<CartaPoker>): boolean
        # seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class Poker {
        + esJugada(cartas: List<CartaPoker>): boolean
        # seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class EscaleraColor {
        + esJugada(cartas: List<CartaPoker>): boolean
        # seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class EscaleraReal {
        + esJugada(cartas: List<CartaPoker>): boolean
        # seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    class Descarte{
        - puntajeComodin: Puntaje
        + Descarte(cartas: List<CartaPoker>)
        + esJugada(cartas: List<CartaPoker>): boolean
        # seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    Jugada *-up- "1..5"CartaPoker
    Jugada o-- Puntaje
    CartaPoker o-- Puntaje

    CartaAlta -up--|> Jugada
    Par -up--|> Jugada
    DoblePar -up--|> Jugada
    Trio -up--|> Jugada
    Escalera -up--|> Jugada
    Color -up--|> Jugada
    FullHouse -up--|> Jugada
    Poker -up--|> Jugada
    EscaleraColor -up--|> Jugada
    EscaleraReal -up--|> Jugada
    Descarte -up--|> Jugada
}
@enduml