@startuml
package Model {


    abstract class CartaPoker {
        - puntajeComodin: Puntaje
        - puntaje: Puntaje

        + CartaPoker(valor: Valor, palo: Palo)
        + comprar(): CartaPoker
        + modificarPuntaje(Puntaje: unPuntaje
        + esMismoValor(otraCarta: CartaPoker): boolean
        + esMismoPalo(otraCarta: CartaPoker): boolean
        + esConsecutiva(otraCarta: CartaPoker): boolean
        + compararCartaCon(otraCarta: CartaPoker): boolean
        + aplicarTarot(unPuntaje: Puntaje)
        + aplicarComodin(unPuntaje: Puntaje)
        + comprar(): Comprable
        + {abstract}obtenerValoresPosibles(): List<Integer>
        + {abstract}obtenerPuntaje(): Puntaje
    }


    class CartaFactory {
        + crearCarta(valor: Valor, palo: Palo): CartaPoker
    }

    class Numero {
       + obtenerPuntaje(): Puntaje
       + obtenerValoresPosibles(): List<Integer>
    }

    class Figura {
       + obtenerPuntaje(): Puntaje
       + obtenerValoresPosibles(): List<Integer>
    }

    class As {
       + obtenerPuntaje(): Puntaje
       + obtenerValoresPosibles(): List<Integer>
    }

    enum Palo{
        CORAZONES
        PICAS
        DIAMANTES
        TREBOLES

        + obtenerPaloDesdeString(paloStr: string): Palo
    }

    enum Valor {
       AS
       DOS
       TRES
       CUATRO
       CINCO
       SEIS
       SIETE
       OCHO
       NUEVE
       DIEZ
       JOTA
       REINA
       REY

        + obtenerValorDesdeString(numeroStr: string): Valor
    }


    CartaFactory -down-> CartaPoker
    Numero -up-|> CartaPoker
    Figura -up-|> CartaPoker
    As -up-|> CartaPoker

    CartaPoker -left-> Palo
    CartaPoker -up-> Valor
}
@enduml