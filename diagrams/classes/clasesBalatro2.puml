@startuml

package Model {

    class Jugador {
        - nombre: string
        - mazo: Mazo

        + Jugador(nombre: string, mazo: Mazo)
        + esPosibleIniciarRonda(): boolean
        + iniciarRonda(rondaActual: Ronda)
        + jugar()
        + seleccionarCarta(unaCarta: CartaPoker)
        + aniadirTarots(cartaTarot: Tarot)
        + utilizarTarot(tarotaAplicar: Tarot, carta: CartaPoker)
        + aniadirComodin(unComodin: Comodin)
        + aplicarComodin(unaJugada: Jugada)
        + descartar()
    }

    class Mano {
        - capacidad: int

        + Mano(unMazo: Mazo)
        + Mano(cartas: ArrayList<CartaPoker>)
        + manoLlena():boolean
        + rellenarse()
        + seleccionarCarta(carta: CartaPoker)
        + deseleccionarCarta(carta: CartaPoker)
        + descartar(): Descarte
        + compararSeleccionadasCon(otrasSeleccionadas: ArrayList<CartaPoker>): boolean
        + jugar(): Jugada
    }

    abstract class Comodin{
        - nombre: string
        - descripcion: string
        - puntaje: Puntaje
        - aleaoreidad: Aleatoriedad

        + Comodin(puntaje: Puntaje, nombre: String,
        descripcion: String, aleatoriedad: Aleatoreidad)
        + seAplica(): boolean
        + {abstract}aplicar(unaJugada: Jugada)
        + comprar(): Comprable
    }

    abstract class Tarot {
        - nombre: String
        - descripcion: String
        - puntaje: Puntaje
        - sobre: String
        - ejemplar: String

        + Tarot(nombre: String, descripcion: String,
        puntaje: Puntaje, sobre: String, ejemplar: String)
        + {abstract}aplicar(objeto: Object)
        + comprar(): Comprable
    }

    class Ronda {
            - numero: int
            - puntajeMinimo: int
            - descartesDisponibles: int
            - jugadasDisponibles: int
            - tienda: Tienda
            - estado: RondaEstado

            + Ronda(numero: int, PuntajeMinimo: int, descartesDisponibles: int,
            jugadasDisponibles: int, tienda: Tienda)
            + rondaSuperada(): boolean
            + sePuedeSeguirJugando(): boolean
            + agregarJugada(unaJugada: Jugada)
            + agregarDescarte(unDescarte: Descarte)
            + calcularTotalRonda(): int
            - actualizarPropiedades()

    }

    abstract class Jugada {
            - sumaValores: Puntaje
            - puntajeComodin: Puntaje
            - cartasValidas: List<CartaPoker>

            + Jugada(cartas: Lista<CartaPoker>, puntaje: Puntaje)
            + crearJugada(List<CartaPoker>): Jugada
            + sumarValores()
            + calcularPuntaje(): int
            + aplicarComodin(puntaje: Puntaje)
            + {abstract}esJugada(cartas: List<CartaPoker>): boolean
            # {abstract}seleccionarCartasValidas(cartas: List<CartaPoker>): List<CartaPoker>
    }

    abstract class CartaPoker {
       - valor: Valor
       - palo: Palo
       - puntaje: Puntaje
       - puntajeComodin: Puntaje


       + CartaPoker(valor: Valor, palo: Palo)
       + comprar(): CartaPoker
       + modificarPuntaje(Puntaje: unPuntaje
       + esMismoValor(otraCarta: CartaPoker): boolean
       + esMismoPalo(otraCarta: CartaPoker): boolean
       + esConsecutiva(otraCarta: CartaPoker): boolean
       + compararCartaCon(otraCarta: CartaPoker): boolean
       + aplicarTarot(unPuntaje: Puntaje)
       + aplicarComodin(unPuntaje: Puntaje)
       + comprar(): Comprable
       + {abstract}obtenerPuntaje(): Puntaje
       + {abstract}obtenerValoresPosibles(): List<Integer>
    }

    Jugador o-- Ronda
    Jugador o-- Mano
    Jugador ..> CartaPoker
    Jugador ..> Jugada
    Jugador o-left- "0..2" Tarot
    Jugador o-right- "0..5" Comodin

    Ronda o-- "1..*" Jugada

    Mano o-- "0..5" CartaPoker
    Mano ..> Jugada


    Jugada o-- "1..*" CartaPoker

}
@enduml