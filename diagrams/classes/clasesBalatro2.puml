@startuml

package Model {

class Jugador {
    - nombre: string
    - puntaje: int
    - manoActual: Mano
    - mazo: Mazo
    - comodines: List<Comodin>
    - cartasTarot: List<Tarot>
    - cartasSeleccionadas: List<CartaPoker>
    + Jugador(nombre: string)
    + esMismoPuntaje(unPuntaje: int): boolean
    + esMismoNombre(unNombre: String): boolean
    + iniciarRonda()
    + jugar(): Jugada
    + descartarCartas()
    + comprarCartas()
    + ordenarCartas()
}


class Mazo {
    -cartas: List<CartaPoker>
    - cantidadCartas: int
    # inicializarMazo()
    # mezclar()
    + darCarta(): CartaPoker
    + rellenar(cantidad: int): ArrayList<CartaPoker>
    + repartir(): Mano
}

class Mano {
    - cartas: ArrayList<CartaPoker>
    - seleccionadas: ArrayList<CartaPoker>
    - cantidadCartas: int
    - capacidad: int
    + Mano(cartas: ArrayList<CartaPoker>)
    + eliminarCartas()
    + agregarCarta(carta: CartaPoker)
    + seleccionarCarta(indice: int): CartaPoker
    + deseleccionarCarta(indice: int)
    + ordenarCartas()
    + descartar()
    + manoLlena():boolean
}

class Puntaje {
    - puntos: int
    - multiplicador: int
    + Puntaje(puntos:int, multiplicador:int)
    + incrementarPuntos(incremento: int)
    + incrementarMultiplicador(incremento: int)
    + calcularPuntaje(): int
    + sumarPuntaje(unPuntaje: Puntaje):Puntaje
}

class CartaPoker {
    - valor: int
    - palo: Palo
    - id: int
    + CartaPoker(valor: int, palo: Palo)
    + comprar(): CartaPoker
    + modificarPuntaje(Puntaje: unPuntaje)
    + calcularPuntaje(): int
    + tieneId(unId: int):boolean
}

class Ronda {
    - PuntajeMinimo: int
    - DescartesDisponibles: int
    - JugadasDisponibles: int
    - PuntajeAcumulado: int
    + Ronda(jugador: Jugador)
    + iniciarRonda()
    + verificarPuntaje(): boolean
}

abstract class Jugada {
    - sumaValores: int
    - Puntaje: Puntaje
    # cartas: List<CartaPoker>
    + Jugada(Lista<CartaPoker>)
    + crearJugada(List<CartaPoker>)
    + sumarValores()
    + calcularPuntaje(): int
    + {abstract}esJugada(List<CartaPoker>): boolean
    + {abstract}obtenerPuntaje(): Puntaje
}

CartaPoker o-- Puntaje
Jugador o-- Mazo
Mazo ..> Mano
Mazo o-- "1..*" CartaPoker
Jugador ..> Jugada
Jugada o-- Puntaje
Ronda ..> Jugador
}
@enduml