@startuml

package Model{
    interface Comprable {
        + comprar(): Comprable
    }

    interface Aleatoriedad {
       + seAplica(): boolean
    }

    abstract class Comodin {
        - nombre: string
        - descripcion: string

        + Comodin(puntaje: Puntaje, nombre: String, descripcion: String, aleatoriedad: Aleatoreidad)
        + {abstract}aplicar(unaJugada: Jugada)
    }

    class EfectoJugada {
        - jugadaAAplicar: Class <? extends Jugada>
        + EfectoJugada(unaJugadaAAplicar, puntaje: Puntaje,
        nombre: string, descripcion: string, aleatoriedad: Aleatoriedad)
        + aplicar(unaJugada: Jugada)
    }

    class EfectoCombinado{
        + EfectoCombinado(nombre: string, descripcion: string,
        unaAleatoriedad: Aleatoriedad)
        + agregar(comodin: Comodin)
        + aplicar(unaJugada: Jugada)

    }
    class EfectoPuntaje{
        + EfectoPuntaje(puntaje: Puntaje, nombre: string,
        descripcion: string, unaAleatoriedad: Aleatoriedad)
        + aplicar(unaJugada: Jugada)
    }

    class Puntaje {
                - puntos: int
                - multiplicador: int

                + Puntaje(puntos:int, multiplicador:int)
                + incrementarPuntos(incremento: int)
                + incrementarMultiplicador(incremento: int)
                + calcularPuntaje(): int
                + sumarPuntaje(unPuntaje: Puntaje):Puntaje
                + compararPuntajecon(otroPuntaje: int): boolean
                + compararPuntajecon(otroPuntaje: Puntaje): boolean
        }

    Comodin .up.|> Comprable
    Comodin .up.|> Aleatoriedad

    EfectoPuntaje -up-|> Comodin
    EfectoJugada -up-|> Comodin
    EfectoCombinado -up-|> Comodin

    Comodin o-right-- Puntaje
}

@enduml