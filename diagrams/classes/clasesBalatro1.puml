@startuml

package Model {

class Balatro {
    - indiceRondaActual: int

    + Balatro(nombreJugador: string)
    + cargarRondasDesdeJSON()
    + jugarRonda()
    + avanzaRonda()
    + verificarEstadoJuego()
}

class Mazo {
   - mazoDescarte: List<CartaPoker>

   + Mazo(cartas: ArrayList<CartaPoker>)
   + darCarta(): CartaPoker
   + inicializarMazo()
   + recargarMazo()
   + agregarCartaPoker(carta: CartaPoker)
   # mezclar()
}

class Jugador {
    - nombre: string
    # manoActual: Mano
    - tarots: ArrayList<Tarot>
    - comodines: ArrayList<Comodin>

    + Jugador(nombre: string, mazo: Mazo)
    + esPosibleIniciarRonda(): boolean
    + iniciarRonda(rondaActual: Ronda)
    + jugar()
    + descartar()
    + seleccionarCarta(cartasASeleccionar: ArrayList<CartaPoker>)
    + aniadirTarots(unTarot: Tarot)
    + aniadirComodin(unComodin: Comodin)
    + aniadirCartaPoker(cartaPoker: CartaPoker)
    + eliminarTarot(unTarot: Tarot)
    + eliminarComodin(unComodin: Comodin)
    + utilizarTarot(tarotaAplicar: Tarot)
    + aplicarComodin(unaJugada: Jugada)
}

class Tienda {
    - comodinesALaVenta: ArrayList<Comodin>
    - tarotsALaVenta: ArrayList<Tarot>
    - cartasALaVenta: ArrayList<CartaPoker>

    + Tienda(tiendaNode: JsonNode)
    - inicializarComodines(tiendaNode: JsonNode)
    - procesarComodin (comodinIndividual: JsonNode): Comodin
    - inicializarTarots(tiendaNode: JsonNode)
    - crearTarot(tarotNode: JsonNode):Tarot
    + obtenerComodines(): ArrayList<Comodin>
    + obtenerTarots(): ArrayList<Tarot>
    + obtenerCartas(): ArrayList<CartaPoker>
}

class Ronda {
    - Numero: int
    - PuntajeMinimo: int
    - DescartesDisponibles: int
    - JugadasDisponibles: int
    - Jugadas: List<Jugada>

    + Ronda(numero: int, PuntajeMinimo: int, descartesDisponibles: int,
    jugadasDisponibles: int, tienda: Tienda)    + verificarPuntaje(): boolean
    + rondaSuperada(): boolean
    + sePuedeSeguirJugando(): boolean
    + agregarJugada(unaJugada: Jugada)
    + agregarDescarte(unDescarte: Descarte)
    + calcularTotalRonda(): int
    - actualizarPropiedades()
}

enum EstadoJuego {
    EMPEZADO
    GANADO
    PERDIDO
}

enum RondaEstado {
        GANADA
        PERDIDA
        EN_CURSO
}

Balatro o-- "0..8" Ronda
Balatro o-- Jugador
Balatro o-- EstadoJuego
Balatro o-- Mazo

Jugador o-- Ronda
Jugador o-- Mazo
Ronda o-- Tienda
Ronda o-- RondaEstado
}
@enduml